### 根据栈先进后出的性质，每次一个数字进栈或将栈顶元素弹出，由此可以产生不同的出栈序列




- 这类问题是火车进出入站问题，实际上就是为了判断序列是否能通过栈的进出得到。i是从1-n的连续元素。如果i比给的序列的当前元素小，就将i插入栈中，如果该元素等于栈顶元素的话，将栈定弹出，将这个元素标记，看最后所有的元素是否都被标记，如果是的话，就表示能生成该序列，否则则不行。
```
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

#define ERROR 0
#define OK 1

typedef struct Stack {
    int *elements;
    int max_size, top_index;   
} Stack;

void init(Stack *s, int length) {
    s->elements = (int *)malloc(sizeof(int) * length);
    s->max_size = length;
    s->top_index = -1;    
}

int push(Stack *s, int element) {
    if (s->top_index >= s->max_size - 1) {
        return ERROR;
    }
    s->top_index++;
    s->elements[s->top_index] = element;
    return OK;    
}

int pop(Stack *s) {
    if (s->top_index < 0) {
        return ERROR;
    }
    s->top_index--;
    return OK;    
}

int top(Stack *s) {
    return s->elements[s->top_index];
}

int empty(Stack *s) {
    if (s->top_index < 0) {
        return 1;
    } else {
        return 0;
    }    
}


void clear(Stack *s) {
    free(s->elements);
    free(s);    
}
int main(){
    int n;
    Stack *stack=(Stack *)malloc(sizeof(Stack));
    int mark[120]={0};
    scanf("%d",&n);
    init(stack,n);
    int m[n+1];
    for(int i=1;i<=n;i++) mark[i]=0;
    for(int i=0;i<n;i++) scanf("%d",&m[i]);
    int ind=1;
	for(int i=0;i<n;i++){
        while(ind<=m[i]){
            push(stack,ind);
            ind++;
        }
    
        if(top(stack)==m[i]){
            pop(stack);
            
            mark[m[i]]=1;
        }
    
    }
    int flag=1;
    for(int i=1;i<=n;i++) {
        //printf("%d\n",mark[i]);
        if(mark[i]==0) flag=0;
    }
    if(flag==0) printf("NO\n");
    else printf("YES\n");
    return 0;
}
```

